# Generated by Django 4.1.5 on 2023-08-25 11:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('comment', models.TextField(blank=True, null=True)),
                ('cefr', models.CharField(blank=True, max_length=20)),
                ('progress', models.IntegerField(blank=True, null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('google', models.URLField(blank=True)),
                ('teacher', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EGEtests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ege_testname', models.CharField(max_length=255)),
                ('listening_path', models.CharField(blank=True, max_length=255, null=True)),
                ('listening_1', models.JSONField(blank=True, null=True)),
                ('answers_1', models.JSONField(blank=True, null=True)),
                ('listening_2', models.JSONField(blank=True, null=True)),
                ('answers_2', models.JSONField(blank=True, null=True)),
                ('listening_3', models.JSONField(blank=True, null=True)),
                ('answers_3', models.JSONField(blank=True, null=True)),
                ('reading_10_options', models.JSONField(blank=True, null=True)),
                ('reading_10', models.JSONField(blank=True, null=True)),
                ('answers_10', models.JSONField(blank=True, null=True)),
                ('reading_11_options', models.JSONField(blank=True, null=True)),
                ('reading_11', models.TextField(blank=True, null=True)),
                ('answers_11', models.JSONField(blank=True, null=True)),
                ('reading_12_options', models.JSONField(blank=True, null=True)),
                ('reading_12', models.TextField(blank=True, null=True)),
                ('answers_12', models.JSONField(blank=True, null=True)),
                ('grammar_19', models.JSONField(blank=True, null=True)),
                ('grammar_19_words', models.JSONField(blank=True, null=True)),
                ('answers_19', models.JSONField(blank=True, null=True)),
                ('grammar_25', models.JSONField(blank=True, null=True)),
                ('grammar_25_words', models.JSONField(blank=True, null=True)),
                ('answers_25', models.JSONField(blank=True, null=True)),
                ('grammar_30', models.TextField(blank=True, null=True)),
                ('grammar_30_options', models.JSONField(blank=True, null=True)),
                ('answers_30', models.JSONField(blank=True, null=True)),
                ('letter_name', models.CharField(blank=True, max_length=255, null=True)),
                ('letter', models.TextField(blank=True, null=True)),
                ('letter_task', models.TextField(blank=True, null=True)),
                ('essay_1_task', models.TextField(blank=True, null=True)),
                ('essay_1_data', models.TextField(blank=True, null=True)),
                ('essay_1_conclusion', models.TextField(blank=True, null=True)),
                ('essay_2_task', models.TextField(blank=True, null=True)),
                ('essay_2_data', models.TextField(blank=True, null=True)),
                ('essay_2_conclusion', models.TextField(blank=True, null=True)),
                ('speaking_text', models.TextField(blank=True, null=True)),
                ('ad_img', models.CharField(blank=True, max_length=255, null=True)),
                ('ad_header', models.CharField(blank=True, max_length=255, null=True)),
                ('ad_task', models.TextField(blank=True, null=True)),
                ('ad_questions', models.JSONField(blank=True, null=True)),
                ('interview_path', models.CharField(blank=True, max_length=255, null=True)),
                ('monologue_topic', models.CharField(blank=True, max_length=255, null=True)),
                ('monologue_points', models.JSONField(blank=True, null=True)),
                ('monologue_imgs', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('users', models.ManyToManyField(blank=True, limit_choices_to={'teacher': False}, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_name', models.CharField(blank=True, max_length=255, unique=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TestTypes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(unique=True)),
                ('type', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TheoryTopics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Words',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_word', models.TextField()),
                ('russian_word', models.TextField()),
                ('context', models.TextField()),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('user_added', models.BooleanField(default=False)),
                ('certified', models.BooleanField(default=False)),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('topics', models.ManyToManyField(blank=True, to='website.topic')),
            ],
        ),
        migrations.CreateModel(
            name='UserWords',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('date', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.words')),
            ],
        ),
        migrations.CreateModel(
            name='Theory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField()),
                ('cefr', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.theorytopics')),
            ],
        ),
        migrations.CreateModel(
            name='Tests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=255, unique=True)),
                ('order', models.FloatField(blank=True, null=True)),
                ('testname', models.CharField(max_length=255, unique=True)),
                ('lvl', models.CharField(max_length=255)),
                ('sentences', models.JSONField()),
                ('answers', models.JSONField()),
                ('explanation', models.JSONField(blank=True, null=True)),
                ('options', models.JSONField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('audio_path', models.CharField(blank=True, max_length=255)),
                ('script', models.TextField(blank=True, null=True)),
                ('case', models.BooleanField(default=False)),
                ('task', models.TextField(blank=True)),
                ('input_size', models.PositiveIntegerField(blank=True, null=True)),
                ('picture', models.CharField(blank=True, max_length=255, null=True)),
                ('part', models.CharField(blank=True, max_length=255)),
                ('theory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.theory')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.theorytopics')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.testtypes')),
            ],
        ),
        migrations.CreateModel(
            name='TeacherStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, to='website.group')),
                ('students', models.ManyToManyField(blank=True, limit_choices_to={'teacher': False}, related_name='student_teachers', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(limit_choices_to={'teacher': True}, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_students', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudyPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('covered', models.BooleanField(default=False)),
                ('title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.theory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('surname', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('social', models.URLField(blank=True, null=True)),
                ('service', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField()),
                ('date', models.DateTimeField()),
                ('answers', models.JSONField()),
                ('answers_plain', models.JSONField()),
                ('test_proper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.tests')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FreeTests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=255, unique=True)),
                ('testname', models.CharField(max_length=255, unique=True)),
                ('order', models.FloatField(blank=True, null=True)),
                ('lvl', models.CharField(blank=True, max_length=255, null=True)),
                ('sentences', models.JSONField(blank=True, null=True)),
                ('answers', models.JSONField(blank=True, null=True)),
                ('explanation', models.JSONField(blank=True, null=True)),
                ('options', models.JSONField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('audio_path', models.CharField(blank=True, max_length=255)),
                ('script', models.TextField(blank=True, null=True)),
                ('case', models.BooleanField(default=False)),
                ('task', models.TextField(blank=True)),
                ('input_size', models.PositiveIntegerField(blank=True, null=True)),
                ('picture', models.CharField(blank=True, max_length=255, null=True)),
                ('part', models.CharField(blank=True, max_length=255)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.posts')),
                ('theory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.theory')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.theorytopics')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.testtypes')),
            ],
        ),
        migrations.CreateModel(
            name='EGEresults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checked', models.BooleanField(default=False)),
                ('speaking_audio', models.BooleanField(default=False)),
                ('converted_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('raw', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(86)])),
                ('date', models.DateTimeField()),
                ('st_answers_1', models.JSONField(blank=True, null=True)),
                ('score_1', models.IntegerField(default=0)),
                ('st_answers_2', models.JSONField(blank=True, null=True)),
                ('score_2', models.IntegerField(default=0)),
                ('st_answers_3_9', models.JSONField(blank=True, null=True)),
                ('score_3_9', models.IntegerField(default=0)),
                ('st_answers_10', models.JSONField(blank=True, null=True)),
                ('score_10', models.IntegerField(default=0)),
                ('st_answers_11', models.JSONField(blank=True, null=True)),
                ('score_11', models.IntegerField(default=0)),
                ('st_answers_12_18', models.JSONField(blank=True, null=True)),
                ('score_12_18', models.IntegerField(default=0)),
                ('st_answers_19_24', models.JSONField(blank=True, null=True)),
                ('score_19_24', models.IntegerField(default=0)),
                ('st_answers_25_29', models.JSONField(blank=True, null=True)),
                ('score_25_29', models.IntegerField(default=0)),
                ('st_answers_30_36', models.JSONField(blank=True, null=True)),
                ('score_30_36', models.IntegerField(default=0)),
                ('st_letter', models.TextField(blank=True, null=True)),
                ('letter_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)])),
                ('st_essay_38_1', models.TextField(blank=True, null=True)),
                ('st_essay_38_2', models.TextField(blank=True, null=True)),
                ('essay_score', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('listening', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('reading', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('grammar', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(18)])),
                ('writing', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('speaking_read', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('speaking_questions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('speaking_interview', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('speaking_monologue', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('speaking', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('st_answers', models.JSONField(blank=True, null=True)),
                ('scores', models.JSONField(blank=True, null=True)),
                ('test_proper', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.egetests')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='topics',
            field=models.ManyToManyField(through='website.StudyPlan', to='website.theory'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
